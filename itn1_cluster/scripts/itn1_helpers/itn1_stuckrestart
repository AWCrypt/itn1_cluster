#!/bin/bash

## https://github.com/gacallea/itn1_cluster
## this script checks against date delta and last received block time delta
## if conditions are met (defaults to 100 slots and 5 minutes lag) it restarts the node
## put the script in '/root/itn1_helpers/itn1_stuckrestart'
## put this in root's crontab (crontab -e):
## */5 * * * * /root/itn1_helpers/itn1_stuckrestart

## CHANGE TO WHAT SUITS YOU THE BEST
maxBlockDelta=100 ## slots
maxDateDelta=300  ## seconds

## source the custom variables
. /root/itn1_config

#######################################################################################################################################

### DO NOT EDIT PAST THIS POINT ### ## DO NOT CHANGE ### DO NOT EDIT PAST THIS POINT ### ## DO NOT CHANGE #### ## #
### DO NOT EDIT PAST THIS POINT ### ## DO NOT CHANGE ### DO NOT EDIT PAST THIS POINT ### ## DO NOT CHANGE #### ## #

## time and date calculations
chainstartdate=1576264417
elapsed=$((($(date +%s) - chainstartdate)))
epoch=$(((elapsed / 86400)))
slot=$(((elapsed % 86400) / 2))
nowBlockDate="$epoch.$slot"
dateNow="$(date --iso-8601=s)"

## temporary file to store data
tmpFile=$(mktemp)

for ((i = 0; i < "$ITN1_NODES_COUNT"; i++)); do
    ITN1_NODE_NUM="$((i + 1))"
    NODE_REST_API_PORT="${ITN1_REST_API_PORT[i]}"
    NODE_REST_API_URL="http://127.0.0.1:$NODE_REST_API_PORT/api"

    ## query each node for status
    poolStatus=$($JCLI rest v0 node stats get -h "$NODE_REST_API_URL" | awk '/state/ {print $2}')

    ## if the pool is running...
    if [ "$poolStatus" == "Running" ]; then
        ## let's get the node state in the temp file
        $JCLI rest v0 node stats get -h "$NODE_REST_API_URL" --output-format json >"$tmpFile"
        ## set the needed variables
        poolID=$(jq -r .nodeId "$tmpFile")
        lastBlockDate=$(jq -r .lastBlockDate "$tmpFile")
        lastReceivedBlockTime=$(jq -r .lastReceivedBlockTime "$tmpFile")
    elif [ "$poolStatus" == "Bootstrapping" ]; then
        echo "the pool is Bootstrapping, exiting the routine"
        continue
    else
        echo "ERROR: THE POOL IS NOT RUNNING, exiting the routine"
        continue
    fi

    ## if we reach this point, the node as running and we've got valid variables assignments to compare to
    ## ...check against the blocks delta
    deltaBlockCount=$(echo "$nowBlockDate - $lastBlockDate" | bc | sed 's/0//g' | sed 's/\.//g')
    ## if the date delta is 100 or more...
    if [ "$deltaBlockCount" -ge "$maxBlockDelta" ]; then
        ## ...check against received blocks delta with current date
        deltaReceivedCount=$(dateutils.ddiff "$lastReceivedBlockTime" "$dateNow" -f '%S')
        ## if the received delta is 300 or more seconds...
        if [ "$deltaReceivedCount" -ge "$maxDateDelta" ]; then
            ## ...restart single node
            echo
            /usr/bin/systemctl restart itn1_cluster@"$ITN1_NODE_NUM".service
            echo "ITN_NODE_$ITN1_NODE_NUM ==> $poolID <== was RESTARTED @ $(date)"
            ## let's trigger the failover in case the leader restarted...
            sleep 15
            bash /root/itn1_helpers/itn1_failover
        fi
    ## if the date delta is fine, everyone's happy
    else
        echo "ITN_NODE_$ITN1_NODE_NUM ==> $poolID is FINE"
    fi
done

## we don't need the node tmp file anymore
rm "$tmpFile"
